---
export interface Props {
    title: string;
    price: string;
    originalPrice: string;
    savings: string;
    features: string[];
    link: string;
    productId: string;
    initialStock?: number;
}

const {
    title,
    price,
    originalPrice,
    savings,
    features,
    link,
    productId,
    initialStock = -1,
} = Astro.props;
---

<div class="pricing-card">
    <div class="card-content">
        <h3>{title}</h3>
        <div class="price">{price}</div>
        <div class="price-details">
            <span class="original-price">Precio Regular {originalPrice}</span>
            <span class="savings">({savings})</span>
        </div>
        {
            initialStock >= 0 && (
                <div class="stock-indicator">
                    {initialStock > 0
                        ? `ðŸŸ¢ ${initialStock} disponibles`
                        : "ðŸ”´ Agotado"}
                </div>
            )
        }
        <ul class="features">
            {features.map((feature) => <li>{feature}</li>)}
        </ul>
    </div>
    <button
        class:list={{
            "buy-button": true,
            disabled: initialStock <= 0,
        }}
        data-purchase-button
        data-product={productId}
        data-link={link}
        data-stock={initialStock}
        disabled={initialStock <= 0}
    >
        {initialStock > 0 ? "Comprar Ahora" : "Agotado"}
    </button>
</div>

<script>
    document.addEventListener("astro:page-load", () => {
        document
            .querySelectorAll("[data-purchase-button]")
            .forEach((button) => {
                button.addEventListener("click", async (event) => {
                    const target = event.currentTarget;
                    const productId = target.dataset.product;
                    const link = target.dataset.link;
                    const currentStock = parseInt(target.dataset.stock);

                    if (target.disabled) return;

                    try {
                        const response = await fetch(
                            `/api/check-stock?productId=${productId}`,
                        );
                        const data = await response.json();

                        if (!response.ok) throw new Error(data.error);

                        if (data.available) {
                            window.location.href = link;
                        } else {
                            alert(
                                "Stock agotado, actualizando disponibilidad...",
                            );
                            location.reload();
                        }
                    } catch (error) {
                        console.error("Error:", error);
                        window.location.href = `/error?code=stock_check&message=${encodeURIComponent(error.message)}`;
                    }
                });
            });
    });
</script>

<style>
    .pricing-card {
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        border: 1px solid #e0e0e0;
        max-width: 300px;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
    }

    .pricing-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 30px rgba(0, 0, 0, 0.1);
    }

    .card-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 1rem;
    }

    .card-content h3 {
        color: #34495e;
        margin-bottom: 0.5rem;
        font-size: 1.4rem;
        text-align: center;
        font-weight: 600;
    }

    .price {
        font-size: 1.8rem;
        font-weight: 600;
        color: #4a90e2;
        text-align: center;
        margin: 0.5rem 0;
    }

    .price-details {
        text-align: center;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }

    .original-price {
        color: #95a5a6;
        text-decoration: line-through;
        margin-right: 0.5rem;
    }

    .savings {
        color: #50b89a;
        font-weight: 600;
    }

    .features {
        list-style: none;
        padding: 0;
        margin: 0.5rem 0;
        flex-grow: 1;
    }

    .features li {
        margin-bottom: 0.4rem;
        color: #2c3e50;
        padding-left: 1.2rem;
        position: relative;
        font-size: 0.9rem;
        line-height: 1.2;
    }

    .features li::before {
        content: "ðŸŒ€";
        position: absolute;
        left: 0;
        top: 0;
        font-size: 0.9rem;
    }

    .buy-button {
        width: 100%;
        padding: 0.8rem;
        background: #50b89a;
        color: #fff;
        border: none;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.3s ease;
        font-size: 1rem;
        text-transform: uppercase;
    }

    .buy-button:hover:not(.disabled) {
        background: #3d9970;
    }

    .buy-button.disabled {
        background: #bdc3c7 !important;
        cursor: not-allowed;
        opacity: 0.7;
    }

    .stock-indicator {
        text-align: center;
        margin: 0.5rem 0;
        font-size: 0.9rem;
        font-weight: 500;
        color: #7f8c8d;
    }
</style>
