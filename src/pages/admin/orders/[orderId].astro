---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { getGoogleSheetsClient, SPREADSHEET_ID, SHEETS } from "../../../utils/google-sheets";

const { orderId } = Astro.params;

const sheets = await getGoogleSheetsClient();
const response = await sheets.spreadsheets.values.get({
    spreadsheetId: SPREADSHEET_ID,
    range: `${SHEETS.ORDERS}!A2:H`,
});

let order = null;
if (response.data.values) {
    const orderRow = response.data.values.find(row => row[0] === orderId);
    if (orderRow) {
        const [id, date, status, customerName, customerEmail, productsJson, total] = orderRow;
        let products = [];
        try {
            products = JSON.parse(productsJson);
        } catch (e) {
            console.error(`Error parsing products for order ${orderId}:`, e);
        }
        order = {
            orderId: id,
            date: new Date(date).toLocaleDateString(),
            status,
            customerName,
            customerEmail,
            products,
            total: parseFloat(total),
        };
    }
}

if (!order) {
    return Astro.redirect('/admin/orders');
}
---

<AdminLayout title={`Orden ${orderId}`}>
    <div class="order-header">
        <div class="header-left">
            <a href="/admin/orders" class="back-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                </svg>
                Volver a Órdenes
            </a>
            <h1>Orden #{order.orderId}</h1>
        </div>
        <div class="status-selector">
            <label for="orderStatus">Estado:</label>
            <select id="orderStatus" class="status-select" value={order.status}>
                <option value="pending" selected={order.status === 'pending'}>Pendiente</option>
                <option value="processing" selected={order.status === 'processing'}>Procesando</option>
                <option value="completed" selected={order.status === 'completed'}>Completada</option>
                <option value="cancelled" selected={order.status === 'cancelled'}>Cancelada</option>
            </select>
        </div>
    </div>

    <div class="order-details">
        <div class="detail-card customer-info">
            <h2>Información del Cliente</h2>
            <div class="info-grid">
                <div class="info-item">
                    <label>Nombre:</label>
                    <span>{order.customerName}</span>
                </div>
                <div class="info-item">
                    <label>Email:</label>
                    <span>{order.customerEmail}</span>
                </div>
                <div class="info-item">
                    <label>Fecha:</label>
                    <span>{order.date}</span>
                </div>
            </div>
        </div>

        <div class="detail-card products-info">
            <h2>Productos</h2>
            <div class="products-list">
                {order.products.map((product: any) => (
                    <div class="product-item">
                        <span class="product-sku">{product.sku}</span>
                        <span class="product-quantity">x{product.quantity}</span>
                    </div>
                ))}
            </div>
            <div class="order-total">
                <span>Total:</span>
                <span class="total-amount">${order.total.toFixed(2)}</span>
            </div>
        </div>
    </div>
</AdminLayout>

<style>
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .header-left {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .back-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #4a5568;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s;
    }

    .back-button:hover {
        color: #2d3748;
    }

    h1 {
        margin: 0;
        color: #2d3748;
        font-size: 1.5rem;
    }

    .status-selector {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .status-select {
        padding: 0.5rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        background-color: white;
        color: #4a5568;
        font-size: 0.875rem;
    }

    .order-details {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .detail-card {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        padding: 1.5rem;
    }

    h2 {
        margin: 0 0 1rem 0;
        color: #2d3748;
        font-size: 1.25rem;
    }

    .info-grid {
        display: grid;
        gap: 1rem;
    }

    .info-item {
        display: grid;
        gap: 0.25rem;
    }

    .info-item label {
        color: #718096;
        font-size: 0.875rem;
    }

    .products-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .product-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem;
        background-color: #f7fafc;
        border-radius: 0.375rem;
    }

    .product-sku {
        font-weight: 500;
        color: #2d3748;
    }

    .product-quantity {
        color: #718096;
    }

    .order-total {
        margin-top: 1.5rem;
        padding-top: 1rem;
        border-top: 1px solid #e2e8f0;
        display: flex;
        justify-content: space-between;
        font-weight: 600;
        color: #2d3748;
    }

    .total-amount {
        color: #3182ce;
    }

    @media (max-width: 768px) {
        .order-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .status-selector {
            width: 100%;
        }

        .status-select {
            flex: 1;
        }
    }
</style>

<script>
    const statusSelect = document.getElementById('orderStatus') as HTMLSelectElement;
    const orderId = window.location.pathname.split('/').pop();

    statusSelect?.addEventListener('change', async (e) => {
        const newStatus = (e.target as HTMLSelectElement).value;
        
        try {
            const response = await fetch(`/api/orders/${orderId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: newStatus }),
            });

            if (!response.ok) {
                throw new Error('Error al actualizar el estado');
            }

            // Mostrar notificación de éxito
            const notification = document.createElement('div');
            notification.className = 'notification success';
            notification.textContent = 'Estado actualizado correctamente';
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        } catch (error) {
            console.error('Error:', error);
            alert('Error al actualizar el estado de la orden');
        }
    });
</script>

<style is:global>
    .notification {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
        padding: 1rem 2rem;
        border-radius: 0.375rem;
        color: white;
        font-weight: 500;
        animation: slideIn 0.3s ease-out;
    }

    .notification.success {
        background-color: #48bb78;
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>
