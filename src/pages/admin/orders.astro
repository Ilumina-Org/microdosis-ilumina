---
import AdminLayout from "../../layouts/AdminLayout.astro";
import { getGoogleSheetsClient, SPREADSHEET_ID, SHEETS } from "../../utils/google-sheets";

const sheets = await getGoogleSheetsClient();
const response = await sheets.spreadsheets.values.get({
    spreadsheetId: SPREADSHEET_ID,
    range: `${SHEETS.ORDERS}!A2:H`,
});

const orders = response.data.values
    ? response.data.values.map((row) => {
          const [orderId, date, status, customerName, customerEmail, productsJson, total] = row;
          let products = [];
          try {
              products = JSON.parse(productsJson);
          } catch (e) {
              console.error(`Error parsing products for order ${orderId}:`, e);
          }
          return {
              orderId,
              date: new Date(date).toLocaleDateString(),
              status,
              customerName,
              customerEmail,
              products,
              total: parseFloat(total),
          };
      })
    : [];
---

<AdminLayout title="Órdenes">
    <div class="orders-header">
        <h1>Gestión de Órdenes</h1>
        <div class="search-container">
            <input type="text" id="searchInput" placeholder="Buscar por ID o cliente..." class="search-input">
        </div>
    </div>

    <div class="orders-container">
        {
            orders.length > 0 ? (
                <div class="orders-table-container">
                    <table class="orders-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Fecha</th>
                                <th>Cliente</th>
                                <th>Estado</th>
                                <th>Total</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            {orders.map((order) => (
                                <tr class="order-row" data-order-id={order.orderId}>
                                    <td>{order.orderId}</td>
                                    <td>{order.date}</td>
                                    <td>
                                        <div class="customer-info">
                                            <span>{order.customerName}</span>
                                            <span class="customer-email">{order.customerEmail}</span>
                                        </div>
                                    </td>
                                    <td>
                                        <span class={`status-badge ${order.status.toLowerCase()}`}>
                                            {order.status}
                                        </span>
                                    </td>
                                    <td>${order.total.toFixed(2)}</td>
                                    <td>
                                        <div class="actions">
                                            <button class="btn-icon view-btn" title="Ver detalles">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                                    <circle cx="12" cy="12" r="3"></circle>
                                                </svg>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            ) : (
                <div class="no-data-message">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                        <line x1="3" y1="6" x2="21" y2="6"></line>
                        <path d="M16 10a4 4 0 0 1-8 0"></path>
                    </svg>
                    <p>No hay órdenes disponibles</p>
                </div>
            )
        }
    </div>

    <!-- Modal para ver detalles de la orden -->
    <div id="orderModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Detalles de la Orden</h2>
                <button class="close-modal">&times;</button>
            </div>
            <div id="orderDetails" class="order-details">
                <!-- El contenido se llenará dinámicamente -->
            </div>
        </div>
    </div>
</AdminLayout>

<style>
    .orders-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    h1 {
        margin: 0;
        color: #2d3748;
        font-size: 1.5rem;
    }

    .search-input {
        padding: 0.5rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        width: 300px;
        font-size: 0.875rem;
    }

    .orders-table-container {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .orders-table {
        width: 100%;
        border-collapse: collapse;
    }

    .orders-table th,
    .orders-table td {
        padding: 1rem;
        text-align: left;
        border-bottom: 1px solid #e2e8f0;
    }

    .orders-table th {
        background-color: #f7fafc;
        font-weight: 600;
        color: #4a5568;
    }

    .customer-info {
        display: flex;
        flex-direction: column;
    }

    .customer-email {
        color: #718096;
        font-size: 0.875rem;
    }

    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .status-badge.pending {
        background-color: #feebc8;
        color: #c05621;
    }

    .status-badge.completed {
        background-color: #c6f6d5;
        color: #2f855a;
    }

    .status-badge.cancelled {
        background-color: #fed7d7;
        color: #c53030;
    }

    .actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-icon {
        background: none;
        border: none;
        padding: 0.5rem;
        cursor: pointer;
        border-radius: 0.375rem;
        transition: background-color 0.2s;
    }

    .btn-icon:hover {
        background-color: #edf2f7;
    }

    .view-btn {
        color: #4a5568;
    }

    /* Modal styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        margin: 2rem auto;
        padding: 1.5rem;
        border-radius: 0.5rem;
        max-width: 600px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #4a5568;
    }

    .order-details {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    @media (max-width: 768px) {
        .orders-header {
            flex-direction: column;
            gap: 1rem;
        }

        .search-input {
            width: 100%;
        }

        .orders-table {
            display: block;
            overflow-x: auto;
        }
    }
</style>

<script>
    // Función para abrir el modal
    function openModal() {
        const modal = document.getElementById('orderModal');
        modal.style.display = 'block';
    }

    // Función para cerrar el modal
    function closeModal() {
        const modal = document.getElementById('orderModal');
        modal.style.display = 'none';
    }

    // Event listener para los botones de ver detalles
    document.querySelectorAll('.view-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
            const row = e.target.closest('.order-row');
            const orderId = row.dataset.orderId;

            try {
                const response = await fetch(`/api/orders/${orderId}`);
                const orderDetails = await response.json();

                // Actualizar el contenido del modal
                const detailsContainer = document.getElementById('orderDetails');
                detailsContainer.innerHTML = `
                    <div class="detail-section">
                        <h3>Información del Cliente</h3>
                        <p><strong>Nombre:</strong> ${orderDetails.customerName}</p>
                        <p><strong>Email:</strong> ${orderDetails.customerEmail}</p>
                    </div>
                    <div class="detail-section">
                        <h3>Productos</h3>
                        <ul>
                            ${orderDetails.products.map(product => `
                                <li>
                                    <span>${product.sku}</span>
                                    <span>x${product.quantity}</span>
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                    <div class="detail-section">
                        <h3>Detalles del Pago</h3>
                        <p><strong>Total:</strong> $${orderDetails.total.toFixed(2)}</p>
                        <p><strong>Estado:</strong> ${orderDetails.status}</p>
                    </div>
                `;

                openModal();
            } catch (error) {
                console.error('Error:', error);
                alert('Error al cargar los detalles de la orden');
            }
        });
    });

    // Event listener para cerrar el modal
    document.querySelectorAll('.close-modal').forEach(button => {
        button.addEventListener('click', closeModal);
    });

    // Cerrar modal al hacer clic fuera
    window.addEventListener('click', (e) => {
        const modal = document.getElementById('orderModal');
        if (e.target === modal) {
            closeModal();
        }
    });

    // Funcionalidad de búsqueda
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('.order-row');

        rows.forEach(row => {
            const orderId = row.querySelector('td:first-child').textContent.toLowerCase();
            const customerName = row.querySelector('.customer-info span:first-child').textContent.toLowerCase();
            const customerEmail = row.querySelector('.customer-email').textContent.toLowerCase();

            if (orderId.includes(searchTerm) || 
                customerName.includes(searchTerm) || 
                customerEmail.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });
</script>
