---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { getStock } from "../../../utils/stock";

const products = await getStock();
const inventoryItems = Object.values(products);
---

<AdminLayout title="Inventario">
    <div class="inventory-header">
        <h1>Gestión de Inventario</h1>
        <div class="header-actions">
            <div class="search-container">
                <input type="text" id="searchInput" placeholder="Buscar por SKU o título..." class="search-input">
            </div>
            <a href="/admin/inventory/new" class="btn-primary">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
                Añadir Producto
            </a>
        </div>
    </div>

    <div class="inventory-container">
        {inventoryItems.length > 0 ? (
            <div class="inventory-table-container">
                <table class="inventory-table">
                    <thead>
                        <tr>
                            <th>SKU</th>
                            <th>Título</th>
                            <th>Imagen</th>
                            <th>Precio</th>
                            <th>Precio Regular</th>
                            <th>Stock</th>
                            <th>Destacado</th>
                            <th>Tipo</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        {inventoryItems.map((item) => (
                            <tr class="inventory-row" data-sku={item.sku}>
                                <td>{item.sku}</td>
                                <td>{item.title}</td>
                                <td>
                                    <img src={item.imageUrl} alt={item.title} class="product-thumbnail" />
                                </td>
                                <td>${item.price}</td>
                                <td>${item.regularPrice}</td>
                                <td>
                                    <div class="stock-info">
                                        <span class={`stock-badge ${item.disponible > 0 ? 'in-stock' : 'out-of-stock'}`}>
                                            {item.disponible} disponibles
                                        </span>
                                    </div>
                                </td>
                                <td>
                                    <span class={`featured-badge ${item.featured ? 'yes' : 'no'}`}>
                                        {item.featured ? 'Sí' : 'No'}
                                    </span>
                                </td>
                                <td>
                                    <span class="type-badge">
                                        {item.tipo === 'subscription' ? 'Suscripción' : 'Paquete'}
                                    </span>
                                </td>
                                <td>
                                    <div class="actions">
                                        <a href={`/admin/inventory/edit/${item.sku}`} class="btn-icon edit-btn" title="Editar producto" style="display: inline-flex; align-items: center; padding: 0.5rem; border-radius: 0.375rem; color: #4a5568; transition: all 0.2s; text-decoration: none;">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                            </svg>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        ) : (
            <div class="no-data-message">
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>
                </svg>
                <p>No hay productos en el inventario</p>
            </div>
        )}
    </div>


</AdminLayout>

<style>
    .inventory-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .header-actions {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    h1 {
        margin: 0;
        color: #2d3748;
        font-size: 1.5rem;
    }

    .search-input {
        padding: 0.5rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        width: 300px;
        font-size: 0.875rem;
    }

    .btn-primary {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background-color: #3182ce;
        color: white;
        border: none;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .btn-primary:hover {
        background-color: #2c5282;
    }

    .actions {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }

    .btn-icon {
        background-color: #edf2f7;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        padding: 0.5rem;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-icon:hover {
        background-color: #e2e8f0;
        transform: scale(1.05);
    }

    .btn-icon svg {
        width: 1.25rem;
        height: 1.25rem;
        color: #4a5568;
    }

    .inventory-table-container {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .inventory-table {
        width: 100%;
        border-collapse: collapse;
    }

    .inventory-table th,
    .inventory-table td {
        padding: 1rem;
        text-align: left;
        border-bottom: 1px solid #e2e8f0;
    }

    .inventory-table th {
        background-color: #f7fafc;
        font-weight: 600;
        color: #4a5568;
    }

    .product-thumbnail {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 4px;
    }

    .stock-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .stock-badge.in-stock {
        background-color: #c6f6d5;
        color: #2f855a;
    }

    .stock-badge.out-of-stock {
        background-color: #fed7d7;
        color: #c53030;
    }

    .featured-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .featured-badge.yes {
        background-color: #bee3f8;
        color: #2c5282;
    }

    .featured-badge.no {
        background-color: #e2e8f0;
        color: #4a5568;
    }

    .type-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
        font-weight: 500;
        background-color: #feebc8;
        color: #c05621;
    }

    .actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-icon {
        background: none;
        border: none;
        padding: 0.25rem;
        cursor: pointer;
        color: #4a5568;
        transition: color 0.2s;
    }

    .btn-icon:hover {
        color: #2d3748;
    }

    .no-data-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 4rem;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        color: #4a5568;
    }

    .no-data-message svg {
        margin-bottom: 1rem;
        color: #a0aec0;
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal-content {
        position: relative;
        background-color: white;
        margin: 2rem auto;
        padding: 0;
        width: 90%;
        max-width: 600px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        padding: 1.5rem;
        border-bottom: 1px solid #e2e8f0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        font-size: 1.25rem;
        color: #2d3748;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        padding: 1.5rem;
        border-top: 1px solid #e2e8f0;
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #a0aec0;
        cursor: pointer;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #4a5568;
        font-size: 0.875rem;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        font-size: 0.875rem;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
    }

    .checkbox-label input[type="checkbox"] {
        width: auto;
    }

    .btn-secondary {
        padding: 0.5rem 1rem;
        background-color: #e2e8f0;
        color: #4a5568;
        border: none;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .btn-secondary:hover {
        background-color: #cbd5e0;
    }
</style>

<script>
    const searchInput = document.getElementById('searchInput');
    const addProductBtn = document.getElementById('addProductBtn');
    const productModal = document.getElementById('productModal');
    const closeModalBtns = document.querySelectorAll('.close-modal');
    const saveProductBtn = document.getElementById('saveProduct');
    const productForm = document.getElementById('productForm');

    // Búsqueda en tiempo real
    searchInput?.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
        const rows = document.querySelectorAll('.inventory-row');

        rows.forEach((row) => {
            const sku = row.getAttribute('data-sku')?.toLowerCase() || '';
            const title = row.querySelector('td:nth-child(2)')?.textContent?.toLowerCase() || '';

            if (sku.includes(searchTerm) || title.includes(searchTerm)) {
                (row as HTMLElement).style.display = '';
            } else {
                (row as HTMLElement).style.display = 'none';
            }
        });
    });

    // Abrir modal para añadir producto
    addProductBtn?.addEventListener('click', () => {
        productForm?.reset();
        productModal?.classList.add('active');
        productModal!.style.display = 'block';
    });

    // Cerrar modal
    closeModalBtns.forEach((btn) => {
        btn.addEventListener('click', () => {
            productModal!.style.display = 'none';
        });
    });

    // Cerrar modal al hacer clic fuera
    window.addEventListener('click', (e) => {
        if (e.target === productModal) {
            productModal!.style.display = 'none';
        }
    });

    // Editar producto
    document.querySelectorAll('.edit-btn').forEach((btn) => {
        btn.addEventListener('click', (e) => {
            const row = (e.target as HTMLElement).closest('.inventory-row');
            if (!row) return;

            const sku = row.getAttribute('data-sku');
            // Aquí cargarías los datos del producto en el formulario
            productModal!.style.display = 'block';
        });
    });

    // Guardar producto
    saveProductBtn?.addEventListener('click', async () => {
        const formData = new FormData(productForm as HTMLFormElement);
        const productData = Object.fromEntries(formData);

        try {
            const response = await fetch('/api/inventory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(productData),
            });

            if (!response.ok) {
                throw new Error('Error al guardar el producto');
            }

            // Recargar la página para mostrar los cambios
            window.location.reload();
        } catch (error) {
            console.error('Error:', error);
            alert('Error al guardar el producto');
        }
    });
</script>
    <div class="inventory-header">
        <h1>Gestión de Inventario</h1>
        <div class="controls">
            <div class="search-container">
                <input type="text" id="searchInput" placeholder="Buscar por SKU o título..." class="search-input">
            </div>
            <select id="filterTipo" class="filter-select">
                <option value="">Todos los tipos</option>
                <option value="package">Paquetes</option>
                <option value="subscription">Suscripciones</option>
            </select>
            <select id="filterStock" class="filter-select">
                <option value="">Todo el stock</option>
                <option value="instock">En stock</option>
                <option value="lowstock">Stock bajo</option>
                <option value="outofstock">Sin stock</option>
            </select>
            <button id="refreshBtn" class="refresh-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polyline points="1 4 1 10 7 10"></polyline>
                    <polyline points="23 20 23 14 17 14"></polyline>
                    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
                </svg>
                Actualizar
            </button>
        </div>
    </div>
    <div class="inventory-container">
        {
            inventoryItems.length > 0 ? (
                <div class="inventory-table-container">
                    <table class="inventory-table">
                        <thead>
                            <tr>
                                <th>SKU</th>
                                <th>Título</th>
                                <th>Imagen</th>
                                <th>Precio</th>
                                <th>Precio Regular</th>
                                <th>Stock</th>
                                <th>Destacado</th>
                                <th>Tipo</th>
                                <th>Acciones</th>
                                <th>Título</th>
                                <th>Precio</th>
                                <th>Tipo</th>
                                <th>Disponible</th>
                                <th>Reservado</th>
                                <th>Total</th>
                                <th>Destacado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            {inventoryItems.map((item) => (
                                <tr 
                                    class="inventory-row" 
                                    data-sku={item.sku}>
                                    <td>{item.sku}</td>
                                    <td>{item.title}</td>
                                    <td>
                                        <img src={item.imageUrl} alt={item.title} class="product-thumbnail" />
                                    </td>
                                    <td>${item.price}</td>
                                    <td>${item.regularPrice}</td>
                                    <td>
                                        <div class="stock-info">
                                            <span class={`stock-badge ${item.disponible > 0 ? 'in-stock' : 'out-of-stock'}`}>
                                                {item.disponible} disponibles
                                            </span>
                                        </div>
                                    </td>
                                    <td>
                                        <span class={`featured-badge ${item.featured ? 'yes' : 'no'}`}>
                                            {item.featured ? 'Sí' : 'No'}
                                        </span>
                                    </td>
                                    <td>
                                        <span class="type-badge">
                                            {item.tipo === 'subscription' ? 'Suscripción' : 'Paquete'}
                                        </span>
                                    </td>
                                    <td>
                                        <div class="actions">
                                            <button class="btn-icon edit-btn" title="Editar producto">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                                    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                                </svg>
                                            </button>
                                        </div>
                                    </td>
                                    data-tipo={item.tipo}
                                    data-stock-status={item.disponible === 0 ? "outofstock" : (item.disponible < 5 ? "lowstock" : "instock")}
                                >
                                    <td>{item.sku}</td>
                                    <td>
                                        <div class="product-image-container">
                                            <img 
                                                src={item.imageUrl || "/images/placeholder-image.png"} 
                                                alt={item.title} 
                                                class="product-thumbnail"
                                                onerror="this.src='/images/placeholder-image.png'"
                                            />
                                        </div>
                                    </td>
                                    <td>
                                        <div class="product-title">{item.title}</div>
                                        <div class="product-tier">Tier {item.tier}</div>
                                    </td>
                                    <td>
                                        <div class="price-info">
                                            <span class="current-price">${item.price.toFixed(2)}</span>
                                            {item.regularPrice > item.price && (
                                                <span class="regular-price">${item.regularPrice.toFixed(2)}</span>
                                            )}
                                        </div>
                                    </td>
                                    <td>
                                        <span class={`tipo-badge ${item.tipo}`}>
                                            {item.tipo === "package" ? "Paquete" : "Suscripción"}
                                        </span>
                                    </td>
                                    <td class={item.disponible === 0 ? "out-of-stock" : (item.disponible < 5 ? "low-stock" : "")}>
                                        {item.disponible}
                                    </td>
                                    <td>{item.reservado}</td>
                                    <td>{item.total}</td>
                                    <td>
                                        <span class={`featured-badge ${item.featured ? "yes" : "no"}`}>
                                            {item.featured ? "Sí" : "No"}
                                        </span>
                                    </td>
                                    <td>
                                        <div class="actions">
                                            <button class="btn-icon view-btn" title="Ver detalles">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                                    <circle cx="12" cy="12" r="3"></circle>
                                                </svg>
                                            </button>
                                            <button class="btn-icon edit-btn" title="Editar">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                                    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                                </svg>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            ) : (
                <div class="no-data-message">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                        <line x1="3" y1="6" x2="21" y2="6"></line>
                        <path d="M16 10a4 4 0 0 1-8 0"></path>
                    </svg>
                    <p>No hay productos en el inventario</p>
                </div>
            )
        }
    </div>

    <!-- Modal para ver detalles del producto -->
    <div id="productModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Detalles del Producto</h2>
                <button class="close-modal">&times;</button>
            </div>
            <div id="productDetails" class="product-details">
                <!-- El contenido se llenará dinámicamente -->
            </div>
        </div>
    </div>
</AdminLayout>

<style>
    .inventory-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }
    h1 {
        margin: 0;
        color: #2d3748;
        font-size: 1.5rem;
    }
    .controls {
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
    }
    .search-input {
        padding: 0.5rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        width: 250px;
        font-size: 0.875rem;
    }
    .filter-select {
        padding: 0.5rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        background-color: white;
    }
    .refresh-btn {
        display: flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.5rem 1rem;
        background-color: #4a5568;
        color: white;
        border: none;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .refresh-btn:hover {
        background-color: #2d3748;
    }
    .inventory-table-container {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }
    .inventory-table {
        width: 100%;
        border-collapse: collapse;
    }
    .inventory-table th,
    .inventory-table td {
        padding: 1rem;
        text-align: left;
        border-bottom: 1px solid #e2e8f0;
    }
    .inventory-table th {
        background-color: #f7fafc;
        font-weight: 600;
        color: #4a5568;
        white-space: nowrap;
    }
    .product-image-container {
        width: 50px;
        height: 50px;
        overflow: hidden;
        border-radius: 4px;
        background-color: #f7fafc;
    }
    .product-thumbnail {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    .product-title {
        font-weight: 500;
        margin-bottom: 0.25rem;
    }
    .product-tier {
        font-size: 0.75rem;
        color: #718096;
    }
    .price-info {
        display: flex;
        flex-direction: column;
    }
    .current-price {
        font-weight: 600;
    }
    .regular-price {
        font-size: 0.75rem;
        color: #a0aec0;
        text-decoration: line-through;
    }
    .tipo-badge, .featured-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 500;
    }
    .tipo-badge.package {
        background-color: #e9d8fd;
        color: #6b46c1;
    }
    .tipo-badge.subscription {
        background-color: #bee3f8;
        color: #2b6cb0;
    }
    .featured-badge.yes {
        background-color: #c6f6d5;
        color: #2f855a;
    }
    .featured-badge.no {
        background-color: #e2e8f0;
        color: #718096;
    }
    .out-of-stock {
        color: #e53e3e;
        font-weight: 600;
    }
    .low-stock {
        color: #dd6b20;
        font-weight: 600;
    }
    .actions {
        display: flex;
        gap: 0.5rem;
    }
    .btn-icon {
        background: none;
        border: none;
        padding: 0.5rem;
        cursor: pointer;
        border-radius: 0.375rem;
        transition: background-color 0.2s;
    }
    .btn-icon:hover {
        background-color: #edf2f7;
    }
    .view-btn {
        color: #4a5568;
    }
    .edit-btn {
        color: #3182ce;
    }
    /* Modal styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }
    .modal-content {
        background-color: white;
        margin: 2rem auto;
        padding: 1.5rem;
        border-radius: 0.5rem;
        max-width: 600px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
    }
    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }
    .close-modal {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #4a5568;
    }
    .product-details {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }
    .detail-section {
        margin-bottom: 1.5rem;
    }
    .detail-section h3 {
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
        color: #4a5568;
        border-bottom: 1px solid #e2e8f0;
        padding-bottom: 0.5rem;
    }
    .detail-grid {
        display: grid;
        grid-template-columns: 150px 1fr;
        gap: 0.5rem;
    }
    .detail-label {
        font-weight: 500;
        color: #718096;
    }
    .product-image-large {
        width: 100%;
        max-height: 200px;
        object-fit: contain;
        margin-bottom: 1rem;
        background-color: #f7fafc;
        border-radius: 4px;
    }
    .notas-section {
        background-color: #f7fafc;
        padding: 1rem;
        border-radius: 0.375rem;
        margin-top: 1rem;
    }
    .notas-section h4 {
        margin: 0 0 0.5rem 0;
        font-size: 0.875rem;
        color: #4a5568;
    }
    @media (max-width: 768px) {
        .inventory-header {
            flex-direction: column;
            align-items: flex-start;
        }
        .controls {
            width: 100%;
        }
        .search-input, .filter-select {
            width: 100%;
        }
        .inventory-table {
            display: block;
            overflow-x: auto;
        }
        .detail-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<script>
    // Función para abrir el modal
    function openModal() {
        const modal = document.getElementById('productModal');
        modal.style.display = 'block';
    }

    // Función para cerrar el modal
    function closeModal() {
        const modal = document.getElementById('productModal');
        modal.style.display = 'none';
    }

    // Event listener para los botones de ver detalles
    document.querySelectorAll('.view-btn').forEach(button => {
        button.addEventListener('click', (e) => {
            const row = e.target.closest('.inventory-row');
            const sku = row.dataset.sku;
            
            // Obtener los datos del producto directamente de la fila
            const title = row.querySelector('.product-title').textContent;
            const tier = row.querySelector('.product-tier').textContent.replace('Tier ', '');
            const imageUrl = row.querySelector('.product-thumbnail').src;
            const price = row.querySelector('.current-price').textContent;
            const regularPrice = row.querySelector('.regular-price')?.textContent || price;
            const tipo = row.querySelector('.tipo-badge').textContent.trim();
            const disponible = row.cells[5].textContent.trim();
            const reservado = row.cells[6].textContent.trim();
            const total = row.cells[7].textContent.trim();
            const featured = row.querySelector('.featured-badge').textContent.trim() === 'Sí';
            
            // Actualizar el contenido del modal
            const detailsContainer = document.getElementById('productDetails');
            detailsContainer.innerHTML = `
                <img src="${imageUrl}" alt="${title}" class="product-image-large" onerror="this.src='/images/placeholder-image.png'">
                
                <div class="detail-section">
                    <h3>Información del Producto</h3>
                    <div class="detail-grid">
                        <span class="detail-label">SKU:</span>
                        <span>${sku}</span>
                        
                        <span class="detail-label">Título:</span>
                        <span>${title}</span>
                        
                        <span class="detail-label">Tier:</span>
                        <span>${tier}</span>
                        
                        <span class="detail-label">Tipo:</span>
                        <span>${tipo}</span>
                        
                        <span class="detail-label">Precio actual:</span>
                        <span>${price}</span>
                        
                        <span class="detail-label">Precio regular:</span>
                        <span>${regularPrice}</span>
                        
                        <span class="detail-label">Destacado:</span>
                        <span>${featured ? 'Sí' : 'No'}</span>
                    </div>
                </div>
                
                <div class="detail-section">
                    <h3>Información de Stock</h3>
                    <div class="detail-grid">
                        <span class="detail-label">Disponible:</span>
                        <span>${disponible}</span>
                        
                        <span class="detail-label">Reservado:</span>
                        <span>${reservado}</span>
                        
                        <span class="detail-label">Total:</span>
                        <span>${total}</span>
                    </div>
                </div>
                
                <div class="notas-section">
                    <h4>Notas</h4>
                    <p id="productNotes">Cargando notas...</p>
                </div>
            `;
            
            // Aquí podrías hacer una petición para obtener datos adicionales como las notas
            // Por ahora simulamos con un timeout
            setTimeout(() => {
                document.getElementById('productNotes').textContent = "Sin notas disponibles";
            }, 500);
            
            openModal();
        });
    });

    // Event listener para los botones de editar
    document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', (e) => {
            const row = e.target.closest('.inventory-row');
            const sku = row.dataset.sku;
            
            // Redirigir a la página de edición
            window.location.href = `/admin/inventory/edit?sku=${sku}`;
        });
    });

    // Event listener para cerrar el modal
    document.querySelectorAll('.close-modal').forEach(button => {
        button.addEventListener('click', closeModal);
    });

    // Cerrar modal al hacer clic fuera
    window.addEventListener('click', (e) => {
        const modal = document.getElementById('productModal');
        if (e.target === modal) {
            closeModal();
        }
    });

    // Funcionalidad de búsqueda
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', applyFilters);

    // Filtros de tipo y stock
    const filterTipo = document.getElementById('filterTipo');
    const filterStock = document.getElementById('filterStock');
    
    filterTipo.addEventListener('change', applyFilters);
    filterStock.addEventListener('change', applyFilters);

    function applyFilters() {
        const searchTerm = searchInput.value.toLowerCase();
        const tipoFilter = filterTipo.value;
        const stockFilter = filterStock.value;
        
        const rows = document.querySelectorAll('.inventory-row');
        
        rows.forEach(row => {
            const sku = row.querySelector('td:first-child').textContent.toLowerCase();
            const title = row.querySelector('.product-title').textContent.toLowerCase();
            const tipo = row.dataset.tipo;
            const stockStatus = row.dataset.stockStatus;
            
            // Aplicar búsqueda
            const matchesSearch = searchTerm === '' || 
                                 sku.includes(searchTerm) || 
                                 title.includes(searchTerm);
            
            // Aplicar filtro de tipo
            const matchesTipo = tipoFilter === '' || tipo === tipoFilter;
            
            // Aplicar filtro de stock
            const matchesStock = stockFilter === '' || stockStatus === stockFilter;
            
            // Mostrar u ocultar fila
            if (matchesSearch && matchesTipo && matchesStock) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    // Botón de actualizar
    document.getElementById('refreshBtn').addEventListener('click', () => {
        // Mostrar indicador visual de actualización
        const refreshBtn = document.getElementById('refreshBtn');
        const originalContent = refreshBtn.innerHTML;
        refreshBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="rotating">
                <polyline points="1 4 1 10 7 10"></polyline>
                <polyline points="23 20 23 14 17 14"></polyline>
                <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
            </svg>
            Actualizando...
        `;
        refreshBtn.disabled = true;
        
        // Agregar estilo para la animación de rotación
        const style = document.createElement('style');
        style.textContent = `
            .rotating {
                animation: rotate 1s linear infinite;
            }
            @keyframes rotate {
                from { transform: rotate(0deg); }
                to { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(style);
        
        // Simular actualización (aquí harías una llamada a la API)
        fetch('/api/inventory/refresh', { method: 'POST' })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al actualizar el inventario');
                }
                return response.json();
            })
            .then(() => {
                // Recargar la página para obtener los datos actualizados
                window.location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al actualizar el inventario. Por favor, inténtalo de nuevo.');
                refreshBtn.innerHTML = originalContent;
                refreshBtn.disabled = false;
            });
    });
</script>