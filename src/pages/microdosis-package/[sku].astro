---
import Layout from "../../layouts/Layout.astro";
import PackageHeader from "../../components/PackageHeader.astro";
import PackageDescription from "../../components/PackageDescription.astro";
import PaymentOptions from "../../components/ReactComponents/PaymentOptions";
import GuaranteeBox from "../../components/GuaranteeBox.astro";
import OrderSummary from "../../components/OrderSummary.astro";
import NotFound from "../../components/ReactComponents/NotFound";
import { getStock } from "../../utils/stock";
import { fallbackStockData } from "../../utils/constants";

const { sku } = Astro.params;
let packageData = null;
let stockInfo = null;
let usingFallback = false;

console.log("Buscando SKU:", sku);

try {
  let stockData = {};

  try {
    // Intentar obtener datos reales
    stockData = await getStock();
    console.log("Datos reales obtenidos correctamente");
  } catch (apiError) {
    console.warn("Error al obtener datos de stock:", apiError);
    usingFallback = true;
  }

  // Si no tenemos datos reales o el SKU no está en ellos, intentar usar el fallback
  if (!stockData || !stockData[sku]) {
    console.log(
      "Datos reales no disponibles o SKU no encontrado, intentando usar fallback",
    );
    usingFallback = true;
  }

  if (usingFallback) {
    console.log("Usando datos fallback");
    console.log(
      "SKUs disponibles en fallback:",
      Object.keys(fallbackStockData),
    );

    if (fallbackStockData[sku]) {
      stockInfo = fallbackStockData[sku];
      console.log("Producto encontrado en fallback:", sku);
    } else {
      console.warn(`SKU ${sku} no encontrado en datos fallback`);
      throw new Error("Producto no encontrado o no tiene stock disponible.");
    }
  } else {
    // Estamos usando datos reales
    stockInfo = stockData[sku];
  }

  // Si llegamos aquí, tenemos stockInfo de alguna fuente
  if (stockInfo) {
    packageData = {
      title: stockInfo.title,
      price: stockInfo.price,
      originalPrice: stockInfo.regularPrice,
      savings: Math.round(stockInfo.regularPrice - stockInfo.price),
      description: stockInfo.notas || `Paquete ${sku}`,
      availableStock: stockInfo.disponible,
      isFallbackData: usingFallback,
    };
    console.log("Stock Info procesado correctamente");
  } else {
    throw new Error("Producto no encontrado o no tiene stock disponible.");
  }
} catch (error) {
  console.error("Error en el procesamiento:", error);
  if (error instanceof Error) {
    if (
      error.message === "Producto no encontrado o no tiene stock disponible."
    ) {
      console.warn(`Paquete con SKU ${sku} no encontrado o sin stock.`);
      Astro.response.status = 404;
    } else {
      console.error("Error inesperado:", error);
      Astro.response.status = 500;
    }
  }
}
---

{
  packageData ? (
    <Layout>
      <div class="package-container">
        <div class="back-button-container">
          <a href="/" class="back-button">
            <span class="arrow">←</span> Volver a inicio
          </a>
        </div>
        
        {packageData.isFallbackData && (
          <div class="fallback-notice">
            Mostrando información de respaldo. Los datos pueden no estar
            actualizados.
          </div>
        )}
        <div class="package-detail">
          <PackageHeader
            title={packageData.title}
            price={packageData.price}
            originalPrice={packageData.originalPrice}
            savings={packageData.savings}
          />
          <PackageDescription description={packageData.description} />
          <PaymentOptions
            client:load
            basePrice={packageData.price}
            title={packageData.title}
            packageId={sku}
          />
          {/*          <GuaranteeBox />*/}
        </div>
        <OrderSummary title={packageData.title} price={packageData.price} />
      </div>
    </Layout>
  ) : (
    <Layout>
      <NotFound client:load />
    </Layout>
  )
}
<style>
  html {
    font-size: 14px;
    color: #333;
  }
  .package-container {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 1rem;
    max-width: 1000px;
    margin: 2rem auto;
    padding: 0 1rem;
  }
  @media (max-width: 768px) {
    .package-container {
      grid-template-columns: 1fr;
    }
  }
  .package-detail {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    overflow: hidden;
  }
  .fallback-notice {
    background-color: #fff3cd;
    color: #856404;
    padding: 0.75rem;
    margin-bottom: 1rem;
    border-radius: 0.25rem;
    text-align: center;
    grid-column: 1 / -1;
  }
  .back-button-container {
    grid-column: 1 / -1;
    margin-bottom: 1rem;
  }
  .back-button {
    display: inline-flex;
    align-items: center;
    padding: 0.5rem 1rem;
    background-color: #f8f9fa;
    color: #444;
    border-radius: 6px;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease;
    border: 1px solid #e0e0e0;
  }
  .back-button:hover {
    background-color: #e9ecef;
    color: #212529;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
  }
  .arrow {
    font-size: 1.2rem;
    margin-right: 0.3rem;
  }
</style>
