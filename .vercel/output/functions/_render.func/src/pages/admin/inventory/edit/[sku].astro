---
import AdminLayout from "../../../../layouts/AdminLayout.astro";
import { getStock } from "../../../../utils/stock";

const { sku } = Astro.params;
const products = await getStock();
const product = products[sku];

if (!product) {
    return Astro.redirect('/admin/inventory');
}
---

<AdminLayout title="Editar Producto">
    <div class="page-header">
        <h1>Editar Producto</h1>
    </div>

    <div class="form-container">
        <form id="productForm" class="product-form">
            <div class="form-grid">
                <div class="form-group">
                    <label for="sku">SKU *</label>
                    <input type="text" id="sku" name="sku" value={product.sku} readonly>
                </div>
                <div class="form-group">
                    <label for="title">Título *</label>
                    <input type="text" id="title" name="title" value={product.title} required>
                </div>
                <div class="form-group">
                    <label for="price">Precio *</label>
                    <input type="number" id="price" name="price" step="0.01" value={product.price} required>
                </div>
                <div class="form-group">
                    <label for="regularPrice">Precio Regular *</label>
                    <input type="number" id="regularPrice" name="regularPrice" step="0.01" value={product.regularPrice} required>
                </div>
                <div class="form-group">
                    <label for="imageUrl">URL de Imagen *</label>
                    <input type="url" id="imageUrl" name="imageUrl" value={product.imageUrl} required>
                </div>
                <div class="form-group">
                    <label for="tier">Tier</label>
                    <input type="number" id="tier" name="tier" value={product.tier}>
                </div>
                <div class="form-group">
                    <label for="link">Link</label>
                    <input type="url" id="link" name="link" value={product.link}>
                </div>
                <div class="form-group">
                    <label for="disponible">Stock Disponible *</label>
                    <input type="number" id="disponible" name="disponible" value={product.disponible} required>
                </div>
                <div class="form-group">
                    <label for="tipo">Tipo *</label>
                    <select id="tipo" name="tipo" required>
                        <option value="package" selected={product.tipo === 'package'}>Paquete</option>
                        <option value="subscription" selected={product.tipo === 'subscription'}>Suscripción</option>
                    </select>
                </div>
                <div class="form-group checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="featured" name="featured" checked={product.featured}>
                        Destacado
                    </label>
                </div>
            </div>
            <div class="form-group full-width">
                <label for="notas">Notas</label>
                <textarea id="notas" name="notas" rows="3">{product.notas}</textarea>
            </div>
            <div class="form-actions">
                <a href="/admin/inventory" class="btn-secondary">Cancelar</a>
                <button type="submit" class="btn-primary">Guardar Cambios</button>
            </div>
        </form>
    </div>
</AdminLayout>

<style>
    .page-header {
        margin-bottom: 2rem;
    }

    h1 {
        margin: 0;
        color: #2d3748;
        font-size: 1.5rem;
    }

    .form-container {
        background: white;
        padding: 2rem;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .product-form {
        max-width: 1200px;
        margin: 0 auto;
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .full-width {
        grid-column: 1 / -1;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        color: #4a5568;
        font-size: 0.875rem;
    }

    input, select, textarea {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        font-size: 0.875rem;
    }

    input[readonly] {
        background-color: #f7fafc;
        cursor: not-allowed;
    }

    textarea {
        resize: vertical;
    }

    .checkbox-group {
        display: flex;
        align-items: center;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
    }

    .checkbox-label input[type="checkbox"] {
        width: auto;
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid #e2e8f0;
    }

    .btn-primary, .btn-secondary {
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .btn-primary {
        background-color: #3182ce;
        color: white;
        border: none;
    }

    .btn-primary:hover {
        background-color: #2c5282;
    }

    .btn-secondary {
        background-color: #e2e8f0;
        color: #4a5568;
        border: 1px solid #cbd5e0;
    }

    .btn-secondary:hover {
        background-color: #cbd5e0;
    }
</style>

<script>
    const form = document.getElementById('productForm');
    const sku = form.querySelector('#sku').value;

    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        const product = {
            sku: formData.get('sku'),
            title: formData.get('title'),
            price: parseFloat(formData.get('price')),
            regularPrice: parseFloat(formData.get('regularPrice')),
            imageUrl: formData.get('imageUrl'),
            tier: parseInt(formData.get('tier'), 10),
            link: formData.get('link'),
            disponible: parseInt(formData.get('disponible'), 10),
            reservado: parseInt(formData.get('reservado') || '0', 10),
            total: parseInt(formData.get('disponible'), 10),
            notas: formData.get('notas'),
            featured: formData.get('featured') === 'on',
            tipo: formData.get('tipo')
        };

        try {
            const response = await fetch(`/api/inventory/${sku}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(product)
            });

            const data = await response.json();

            if (response.ok) {
                window.location.href = '/admin/inventory';
            } else {
                alert(data.error || 'Error al actualizar el producto');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error al actualizar el producto');
        }
    });
</script>
